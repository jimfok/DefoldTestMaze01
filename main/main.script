local Maze = require "main.maze"
local DemoPattern = require "main.demo-pattern"
local RandomDice = require "modules.random-dice"

-- Print the distance grid returned from Maze:calculate_center_distances
local function print_distance_grid(dist)
    for y = 1, #dist do
        local line = ""
        for x = 1, #dist[y] do
            local v = dist[y][x]
            line = line .. ((v == math.huge and "inf") or tostring(v)) .. " "
        end
        print(line)
    end
end

-- Validate that all entries in the distance grid are finite numbers
local function validate_distance_grid(dist)
    for y = 1, #dist do
        for x = 1, #dist[y] do
            local v = dist[y][x]
            if type(v) ~= "number" or v == math.huge or v ~= v then
                return false
            end
        end
    end
    return true
end

-- Run basic tests for the RandomDice module
local function test_randomdice()
    RandomDice.randomseed(12345)

    local tbl = { "a", "b", "c", "d", "e" }

    local results = {
        RandomDice.random(),
        RandomDice.random(10),
        RandomDice.random(5, 15),
        RandomDice.dice(6),
        RandomDice.random_between(20, 30),
        RandomDice.random(tbl),
    }

    print("RandomDice test results: " .. table.concat(results, ", "))

    local expected = { 87628868, 8, 5, 2, 26, "b" }
    local pass = true
    for i, v in ipairs(results) do
        if v ~= expected[i] then
            print(string.format("Test %d failed: expected %d got %d", i, expected[i], v))
            pass = false
        end
    end
    print("RandomDice tests passed: " .. tostring(pass))
end

function init(self)
    msg.post(".", "acquire_input_focus")
    msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })
    self.maze = Maze.new(10, 14, 20, 20)
    self.demo_pattern = DemoPattern.load("/data/demopattern01.csv")
    print("Demo Pattern Loaded")
    self.maze:load_demo_pattern(self.demo_pattern)
    self.maze:debug_print()
    self.maze:generate(os.time())
    print("Maze generated")
    self.maze:debug_print()
    local dist = self.maze:calculate_center_distances()

    print_distance_grid(dist)

    local dist_valid = validate_distance_grid(dist)
    print("Distance grid valid: " .. tostring(dist_valid))
    
    local verified = self.maze:verify_demo_pattern(self.demo_pattern)
    print("Verify demo pattern: " .. tostring(verified))

    test_randomdice()
end

function on_input(self, action_id, action)
    if action_id == hash("touch") and action.pressed then
        print("Touch!")
    end
end
